@page "/redis"
@using Dumpify
@using StudentPortalServer.Services;
@using StudentPortalServer.Quizzes;
@rendermode InteractiveServer
@inject IAsyncKeyValueStorage store

<button @onclick=Save>Write Data</button>
<button @onclick=Get>Get Data</button>

<p>
    Answer
    @if (Answer is not null)
    {
        @($"Ids: {String.Join(", ", Answer.Answers.Select(x => x.Id))}")
        @($"Texts: {String.Join(", ", Answer.Answers.Select(x => x.Text))}")
    }
</p>

@code {
    public IQuizStorage quizStorage = null!;

    protected override void OnInitialized()
    {
        quizStorage = new AsyncKeyValueStorageAdapter(new PrefixedAsyncKeyValueStorage("user", store));
        var a1 = new TestQuestion.AnswerData(AnswerIdentifier.New(), "a");
        var a2 = new TestQuestion.AnswerData(AnswerIdentifier.New(), "b");
        var a3 = new TestQuestion.AnswerData(AnswerIdentifier.New(), "c");
        Question = new TestQuestion()
            {
                Id = QuestionIdentifier.New(),
                QuestionText = "What",
                Variants = [a1, a2, a3],
                Answers = [a1],
            };

    }

    private TestQuestion Question = null!;

    public void Save()
    {
        quizStorage.Set(
        new TestQuestionAnswer(
        Question,
        [Question.Variants.ToList()[Random.Shared.Next(Question.Variants.Count())]]
        )
        );
    }
    private TestQuestionAnswer? Answer;
    public async void Get()
    {
        var res = await quizStorage.Get(Question);
        Answer = res as TestQuestionAnswer;
        Answer.Dump();
        StateHasChanged();
    }
}
