@using Answer = StudentPortal.ComponentData.Components.VarianceQuestionComponent.VarianceAnswer
@using StudentPortal.ComponentData.Quizzes
@using System.Collections.Immutable

@namespace StudentPortal.CommonComponents.Components

@code {
    [Parameter]
    public required VarianceQuestionComponent Component { get; set; }

    [CascadingParameter]
    public required IQuizManager QuizManager { get; set; }

    private IEnumerable<Answer> _variants
    {
        get
        {
            var _seededRandom = new Random(Component.Id.GetHashCode());
            return Component.Shuffle ? Component.Variants.OrderBy(_ => _seededRandom.Next()) : Component.Variants;
        }
    }

    private HashSet<Answer> _answers = [];

    public async void SetAnswers(HashSet<Answer> answers)
    {
        var declaration = Component.GetQuestionDeclaration();
        var variants = _answers.Select(x => x.ToVariant()).ToImmutableList();

        _answers = answers;

        await QuizManager.Set(new VarianceQuestionAnswer(declaration, variants));
    }

    protected override async Task OnInitializedAsync()
    {
        var answer = await QuizManager.Get(Component.GetQuestionDeclaration());
        if (answer is VarianceQuestionAnswer varianceAnswer)
        {
            _answers = varianceAnswer.Variants.Select(x => x.ToVarianceAnswer()).ToHashSet();
        }
    }
}

<div class="border rounded-md px-2 py-2 w-full">
    <span>@Component.QuestionText</span>
    @if (Component.CorrectAnswersIds.Count == 1)
    {
        <SingleAnswerView @bind-Answer:get=_answers.FirstOrDefault()
            @bind-Answer:set="a => SetAnswers(a is null ? [] : [a])" Variants="_variants" />
    }
    else
    {
        <MultiAnswerView @bind-Answers:get="_answers" @bind-Answers:set="SetAnswers" Variants="_variants" />
    }
</div>
