@page "/{id}"
@using PageEditor.Components.Editor
@using StudentPortal.CommonComponents
@using StudentPortal.CommonComponents.Renderer
@using StudentPortal.ComponentData.Abstractions
@using StudentPortal.ComponentData.Components
@using StudentPortal.ComponentData.Conversion
@using StudentPortal.PageEditor.Components
@using System.Text.Json
@using StudentPortal.PageEditor.Storage
@using StudentPortal.PageEditor.Templates
@using StudentPortal.Services
@using System.Collections.Immutable

@inherits FluxorComponent
@inject IState<EditorState> EditorState
@inject IDispatcher Dispatcher
@inject NavigationManager NavigationManager
@inject IQuizManager QuizManager

@code
{
    [Parameter]
    public required string Id { get; set; }

    private IPageTemplate GetTemplate()
    {
        var templateName = EditorState.Value.Page.Metadata["Template"];

        switch (templateName)
        {
            case "quiz": return new QuizPageTemplate();
            default: return new DefaultPageTemplate();
        }
    }

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new EditorFetchPageAction(Guid.Parse(Id)));
        base.OnInitialized();
    }

    public void HandleChanges(IComponentData componentData)
    {
        Dispatcher.Dispatch(new EditorHistoryPushAction(componentData));
    }

    public void Save()
    {
        Dispatcher.Dispatch(new EditorSavePageAction());
    }

    public void Share()
    {
        NavigationManager.NavigateTo($"/pages/view/{EditorState.Value.Page.OwnerId}/{EditorState.Value.Page.Key}");
    }

    public void ChangeName(string name)
    {
        Dispatcher.Dispatch(new EditorSetNameAction(name));
    }

    public void ChangeDisplayMode(EditorDisplayMode displayMode)
    {
        Dispatcher.Dispatch(new EditorSetDisplayModeAction(displayMode));
    }
}

<div class="h-full flex flex-col mx-2 my-2">
    @if (EditorState.Value.IsLoading)
    {
        <span>Loading...</span>
    }
    else
    {
        <Container Class="flex flex-row justify-between w-full mb-3">
            <div class="flex flex-row gap-2">
                <LabeledContainer Label="Page Name">
                    <MudInput T="string" @bind-Value:get="EditorState.Value.Page.Name" @bind-Value:set="ChangeName" />
                </LabeledContainer>
                <HistoryController />
            </div>
            <div class="flex flex-row gap-2 items-center">
                <MudSelect T="EditorDisplayMode" @bind-Value:get="EditorState.Value.DisplayMode"
                    @bind-Value:set="ChangeDisplayMode" Class="w-31">
                    @foreach (var item in Enum.GetValues<EditorDisplayMode>())
                    {
                        <MudSelectItem Value="item">@item</MudSelectItem>
                    }
                </MudSelect>
                <MudButton OnClick="Share" Color="Color.Primary" Variant="Variant.Filled">Share</MudButton>
                <MudButton Disabled=EditorState.Value.Page.IsSaved OnClick="Save" Color="Color.Primary"
                    Variant="Variant.Filled">Save</MudButton>
            </div>
        </Container>
        <div class="flex-auto overflow-y-scroll px-1 pb-1 fixed-sized-editor-container">
            <EditorView>
                <Editor>
                    <EditorRenderer Component="context" ComponentChanged="HandleChanges" />
                </Editor>
                <Preview>
                    <Providers QuizManager="QuizManager">
                        <ComponentRenderer Component="context" />
                    </Providers>
                </Preview>
            </EditorView>
        </div>
    }
</div>
