@typeparam T

@code {
    [Parameter]
    public required T Value { get; set; }
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    private T _value;

    [Parameter]
    public TimeSpan DebounceTime { get; set; } = TimeSpan.FromSeconds(1);

    [Parameter]
    public string Class { get; set; } = null!;

    private Debounce<T> _debounce = default!;

    protected override void OnInitialized()
    {
        _value = Value;
        _debounce = new Debounce<T>(DebounceTime, PushValueChanged);
    }

    public void OnValueChanged(T value)
    {
        _value = value;
        _debounce.Push(value);
    }

    protected override void OnParametersSet()
    {
        _value = Value;
    }

    public async void PushValueChanged(T value)
    {
        await ValueChanged.InvokeAsync(value);
    }
}

<MudInput Class="@Class" Immediate @bind-Value:get="_value" @bind-Value:set="OnValueChanged" />