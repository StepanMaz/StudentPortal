@using System.Collections.Generic
@using System.Diagnostics.CodeAnalysis

@inject IJSRuntime JS
@namespace PageEditor.Components.Shared

@typeparam T

<div id="@Id" class="@Class">
    @foreach (var item in Items)
    {
        @if (ChildContent is not null)
        {
            @ChildContent(item)
        }
    }
</div>

@code {

    [Parameter]
    public required RenderFragment<T> ChildContent { get; set; }

    [Parameter, AllowNull]
    public IEnumerable<T> Items { get; set; }

    [Parameter]
    public EventCallback<(int oldIndex, int newIndex)> OnUpdate { get; set; }

    [Parameter]
    public EventCallback<(int oldIndex, int newIndex)> OnRemove { get; set; }

    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string Group { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string? Pull { get; set; }

    [Parameter]
    public bool Put { get; set; } = true;

    [Parameter]
    public bool Sort { get; set; } = true;

    [Parameter]
    public string Handle { get; set; } = string.Empty;

    [Parameter]
    public string? Filter { get; set; }

    [Parameter]
    public bool ForceFallback { get; set; } = true;

    [Parameter]
    public string Class { get; set; } = null!;

    private DotNetObjectReference<SortableList<T>>? selfReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfReference = DotNetObjectReference.Create(this);
            await JS.InvokeAsync<string>("sortableInit", Id, Group, Pull, Put, Sort, Handle, Filter, selfReference, ForceFallback);
        }
    }

    [JSInvokable]
    public void OnUpdateJS(int oldIndex, int newIndex)
    {
        OnUpdate.InvokeAsync((oldIndex, newIndex));
    }

    [JSInvokable]
    public void OnRemoveJS(int oldIndex, int newIndex)
    {
        OnRemove.InvokeAsync((oldIndex, newIndex));
    }

    public void Dispose() => selfReference?.Dispose();
}