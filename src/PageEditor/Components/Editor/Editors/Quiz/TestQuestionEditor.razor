@using StudentPortal.ComponentData.Abstractions
@using System.Diagnostics
@using StudentPortal.PageEditor
@using System.Globalization

@inherits EditorComponentBase<VarianceQuestionComponent>

@code {
    private string _id = Guid.NewGuid().ToString();

    public Task OnQuestionTextChanged(string value)
    {
        return UpdateComponent(Component with { QuestionText = value });
    }

    public Task OnShuffleChanged(bool shuffle)
    {
        return UpdateComponent(Component with { Shuffle = shuffle });
    }

    public Task EditAnswer(VarianceQuestionComponent.VarianceAnswer answer, string text)
    {
        return UpdateComponent(Component with
        {
            Variants = Component.Variants.Replace(answer, answer with
            {
                AnswerText = text
            })
        });
    }

    public Task SetAnswerValidity(VarianceQuestionComponent.VarianceAnswer answer, bool valid)
    {
        return UpdateComponent(Component with
        {
            CorrectAnswersIds = valid ?
        Component.CorrectAnswersIds.Add(answer.Id) :
        Component.CorrectAnswersIds.Remove(answer.Id)
        });
    }

    public Task RemoveAnswer(VarianceQuestionComponent.VarianceAnswer answer)
    {
        var newVariants = Component.Variants.Remove(answer);
        var newValidIds = Component.CorrectAnswersIds.Remove(answer.Id);

        if (newValidIds.Count == 0 && newVariants.Count > 0)
        {
            newValidIds = newValidIds.Add(newVariants.First().Id);
        }

        return UpdateComponent(Component with
        {
            Variants = newVariants,
            CorrectAnswersIds = newValidIds
        });
    }

    public Task AddAnswer()
    {
        return UpdateComponent(Component with
        {
            Variants = Component.Variants.Add(new(Guid.NewGuid(), "New Answer"))
        });
    }

    public Task ChangeAnswerOrder((int oldIndex, int newIndex) indexes)
    {
        var (oldIndex, newIndex) = indexes;
        if (oldIndex == newIndex) return Task.CompletedTask;

        var item = Component.Variants[oldIndex];

        return UpdateComponent(Component with
        {
            Variants = Component.Variants.RemoveAt(oldIndex).Insert(newIndex, item)
        });
    }

    public Task SetMaxScore(double newValue)
    {
        return UpdateComponent(Component with
        {
            MaxScore = newValue
        });
    }
}

<LabeledContainer Label="Question" Class="flex flex-col gap-2">
    <div class="mt-2 flex flex-row gap-4 w-full">
        <LabeledContainer Label="Question Text" Class="w-full py-2">
            <MudInput Class="w-full" @bind-Value:get="Component.QuestionText"
                @bind-Value:set=OnQuestionTextChanged />
        </LabeledContainer>
        <LabeledContainer Label="Shuffle" Class="min-w-40">
            <MudSelect T="bool" @bind-Value:get="Component.Shuffle" @bind-Value:set="OnShuffleChanged">
                <MudSelectItem Value="false">No Shuffle</MudSelectItem>
                <MudSelectItem Value="true">Shuffle</MudSelectItem>
            </MudSelect>
        </LabeledContainer>
        <LabeledContainer Label="Max Score">
            <MudTextField T="double" Min=0 Format="F1" Culture="@CultureInfo.InvariantCulture"
                @bind-Value:get=Component.MaxScore @bind-Value:set="SetMaxScore" />
        </LabeledContainer>
    </div>
    <SortableList Items="Component.Variants.Labeled()" Handle=@($".{_id}") Context="item"
        Class="flex flex-col gap-2" OnUpdate="ChangeAnswerOrder" Put=false>
        @{
            var (label, answer) = item;
        }
        <div @key=answer.Id class="flex flex-row gap-4 items-center">
            <div class="flex flex-row gap-2 items-center">
                <div class="flex flex-col items-center">
                    <MudIconButton Icon="@Icons.Material.Filled.OpenWith"
                        Class=@($"{_id} px-2 py-2 cursor-grab") />
                </div>
            </div>
            <LabeledContainer Label=@($"{label} Answer") Class="py-2">
                <MudInput @bind-Value:get="answer.AnswerText" @bind-Value:set="s => EditAnswer(answer, s)" />
            </LabeledContainer>
            @{
                var validAnswer = Component.CorrectAnswersIds.Contains(answer.Id);
            }
            <MudTooltip Text="Toggle Valid">
                <MudCheckBox Disabled="Component.CorrectAnswersIds.Count <= 1 && validAnswer"
                    @bind-Value:get=validAnswer @bind-Value:set="(v) => SetAnswerValidity(answer, v)" />
            </MudTooltip>
            <MudTooltip Text="Remove">
                <MudIconButton Disabled="Component.Variants.Count <= 1" Icon="@Icons.Material.Filled.Delete"
                    OnClick="() => RemoveAnswer(answer)" />
            </MudTooltip>
        </div>
    </SortableList>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddAnswer" Class="w-41 mt-2">Add Answer
    </MudButton>
</LabeledContainer>
