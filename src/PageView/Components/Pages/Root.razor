@page "/view/{userId}/{key}"
@rendermode InteractiveServer
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using StudentPortal.Auth
@using StudentPortal.CommonComponents.Renderer
@using StudentPortal.ComponentData.Abstractions
@using StudentPortal.ComponentData.Conversion
@using System.Text.Json
@using StudentPortal.ComponentData.Quizzes
@using StudentPortal.PageView
@using StudentPortal.PageView.Services
@using StudentPortal.Services
@using StudentPortal.ComponentData
@using StudentPortal.Services.DTO

@inject IPageStorageService PageStorage;
@inject ILogger<Root> Logger;
@inject ComponentDataConverter ComponentDataConverter;
@inject IAsyncKeyValueStorage<string, string> Storage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IQuizService QuizService
@inject NavigationManager NavigationManager

@code
{
    [Parameter]
    public required string Key { get; set; }

    [Parameter]
    public required string UserId { get; set; }

    private bool IsLoading = true;
    private IComponentData? PageData;
    private string PageName = "";
    private QuizManager _quizManager = default!;

    bool Authorized= true;

    protected override async Task OnInitializedAsync()
    {
        var page = await PageStorage.GetPageByKey(UserId, Key);

        IsLoading = false;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (page != null && authState.User.TryGetUserId(out var userId))
        {
            PageData = ComponentDataConverter.Convert(page.Content);
            PageName = page.Name;

            var questions = PageData.Components()
            .Select(x => x as IQuestionDeclarationSource)
            .Where(x => x != null)
            .Select(x => x!.GetQuestionDeclaration());

            var submissionStrategy = new SubmissionStrategy(QuizService, page.Id, userId, OnSubmitted);
            var storage = new PrefixedStorageAdapter<string>(userId.ToString(), Storage);

            _quizManager = new QuizManager(questions, submissionStrategy, storage);

            void OnSubmitted(Quiz quiz)
            {
                NavigationManager.NavigateTo($"/results/{quiz.Id}");
            }
        }
        else
        {
            this.Authorized = false;
        }
    }

}
@if(!Authorized){
    <p>Please <a href="/auth/login">login</a></p>
}
@if (IsLoading)
{
    <h1>Loading...</h1>
}
else
{
    if (PageData != null)
    {
        <h1 class="header">@PageName</h1>
        <div>
            <CascadingValue Value="_quizManager">
                <ComponentRenderer Component="PageData" />
            </CascadingValue>
        </div>
    }
    else
    {
        <h1>404: Page Not Found</h1>
    }
}